{"version":3,"sources":["Card.js","CardDeck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","rotation","Math","random","xPos","yPos","_transform","concat","react_default","a","createElement","src","info","image","alt","value","suit","className","style","transform","Component","CardDeck","state","deckId","cards","remaining","handleClick","bind","assertThisInitialized","axios","get","deck","setState","data","deck_id","id","cardUrl","cardRes","success","Error","toConsumableArray","alert","_context2","t0","onClick","map","card","src_Card_0","key","code","console","log","App","src_CardDeck_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oVAuBeA,qBAnBX,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACN,IAAIQ,EAA2B,GAAhBC,KAAKC,SAAgB,GAChCC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAgB,GAJjB,OAKfT,EAAKY,WAAL,aAAAC,OAA+BH,EAA/B,QAAAG,OAA0CF,EAA1C,eAAAE,OAA4DN,EAA5D,QALeP,wEAQf,OACIc,EAAAC,EAAAC,cAAA,OACIC,IAAKd,KAAKJ,MAAMmB,KAAKC,MACrBC,IAAG,GAAAP,OAAKV,KAAKJ,MAAMmB,KAAKG,MAArB,QAAAR,OAAiCV,KAAKJ,MAAMmB,KAAKI,MACpDC,UAAU,OACVC,MAAO,CAAEC,UAAWtB,KAAKS,qBAdtBc,+BC6DJC,qBAxDX,SAAAA,EAAY5B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACf3B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,KAAAH,KAAMJ,KACD6B,MAAQ,CACTC,OAAQ,GACRC,MAAO,GACPC,UAAW,IAEf/B,EAAKgC,YAAchC,EAAKgC,YAAYC,KAAjBhC,OAAAiC,EAAA,EAAAjC,CAAAD,IAPJA,iNAWEmC,IAAMC,IAAN,GAAAvB,OAdJ,uCAcI,yBAAbwB,SACJlC,KAAKmC,SAAS,CACVT,OAAQQ,EAAKE,KAAKC,QAClBT,UAAWM,EAAKE,KAAKR,6QAKrBU,EAAKtC,KAAKyB,MAAMC,gBAEZa,YAxBK,+CAwBuBD,6BACZN,IAAMC,IAAIM,cAA1BC,UACSJ,KAAKK,8BACR,IAAIC,MAAM,6BAEpB1C,KAAKmC,SAAS,CACVR,MAAK,GAAAjB,OAAAZ,OAAA6C,EAAA,EAAA7C,CAAME,KAAKyB,MAAME,OAAjB,CAAwBa,EAAQJ,KAAKT,MAAM,KAChDC,UAAWY,EAAQJ,KAAKR,8DAG5BgB,MAAKC,EAAAC,iJAKT,OACInC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,YACXT,EAAAC,EAAAC,cAAA,MAAIO,UAAU,kBAAd,yCACAT,EAAAC,EAAAC,cAAA,MAAIO,UAAU,oCAAd,2DAGAT,EAAAC,EAAAC,cAAA,UAAQO,UAAU,eAAe2B,QAAS/C,KAAK6B,aAA/C,eAGAlB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,iBACVpB,KAAKyB,MAAME,MAAMqB,IAAI,SAAAC,GAAI,OACtBtC,EAAAC,EAAAC,cAACqC,EAAD,CAAMnC,KAAMkC,EAAME,IAAKF,EAAKG,UAGnCC,QAAQC,IAAItD,KAAKyB,eAnDXF,cCKRgC,MARf,WACI,OACI5C,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACXT,EAAAC,EAAAC,cAAC2C,EAAD,QCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bd87ce01.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Card.css\";\n\nclass Card extends Component {\n    constructor(props) {\n        super(props);\n        let rotation = Math.random() * 90 - 45;\n        let xPos = Math.random() * 40 - 20;\n        let yPos = Math.random() * 40 - 20;\n        this._transform = `translate(${xPos}px, ${yPos}px) rotate(${rotation}deg)`;\n    }\n    render() {\n        return (\n            <img\n                src={this.props.info.image}\n                alt={`${this.props.info.value} OF ${this.props.info.suit}`}\n                className=\"Card\"\n                style={{ transform: this._transform }}\n            />\n        );\n    }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./CardDeck.css\";\n\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck/\";\n\nclass CardDeck extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            deckId: \"\",\n            cards: [],\n            remaining: 52\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    async componentDidMount() {\n        let deck = await axios.get(`${API_BASE_URL}/new/shuffle/`);\n        this.setState({\n            deckId: deck.data.deck_id,\n            remaining: deck.data.remaining\n        });\n    }\n\n    async handleClick() {\n        let id = this.state.deckId;\n        try {\n            let cardUrl = `${API_BASE_URL}${id}/draw/?count=1`;\n            let cardRes = await axios.get(cardUrl);\n            if (!cardRes.data.success) {\n                throw new Error(\"No cards remaining\");\n            }\n            this.setState({\n                cards: [...this.state.cards, cardRes.data.cards[0]],\n                remaining: cardRes.data.remaining\n            });\n        } catch (err) {\n            alert(err);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"CardDeck\">\n                <h1 className=\"CardDeck-title\">ðŸ”· Card Dealer ðŸ”·</h1>\n                <h2 className=\"CardDeck-title CardDeck-subtitle\">\n                    ðŸ”· A little demo made with React ðŸ”·\n                </h2>\n                <button className=\"CardDeck-btn\" onClick={this.handleClick}>\n                    Deal a card\n                </button>\n                <div className=\"CardDeck-pile\">\n                    {this.state.cards.map(card => (\n                        <Card info={card} key={card.code} />\n                    ))}\n                </div>\n                {console.log(this.state)}\n            </div>\n        );\n    }\n}\n\nexport default CardDeck;\n","import React from \"react\";\nimport \"./App.css\";\nimport CardDeck from \"./CardDeck\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <CardDeck />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}